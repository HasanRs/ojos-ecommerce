{"ast":null,"code":"var _jsxFileName = \"/Users/tiffanybouchard/Desktop/workspace/ojos/components/instagram.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\n\nfunction Instagram() {\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: isLoaded,\n    1: setIsLoaded\n  } = useState(false);\n  const {\n    0: images,\n    1: setImages\n  } = useState([]); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(\"https://www.instagram.com/tiffbouchard/?__a=1\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setImages(result.graphql);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 12\n      }\n    }, \"Error: \", error.message);\n  } else if (!isLoaded) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  } else {\n    return (// <ul>\n      //   {items.map((item) => (\n      //     <li key={item.name}>\n      //       {item.name} {item.price}\n      //     </li>\n      //   ))}\n      // </ul>\n      __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 7\n        }\n      }, images)\n    );\n  }\n}\n\nexport default Instagram;","map":{"version":3,"sources":["/Users/tiffanybouchard/Desktop/workspace/ojos/components/instagram.js"],"names":["useState","useEffect","Instagram","error","setError","isLoaded","setIsLoaded","images","setImages","fetch","then","res","json","result","graphql","message"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,SAAT,GAAqB;AACnB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBJ,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM;AAAA,OAACK,QAAD;AAAA,OAAWC;AAAX,MAA0BN,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACO,MAAD;AAAA,OAASC;AAAT,MAAsBR,QAAQ,CAAC,EAAD,CAApC,CAHmB,CAKnB;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,KAAK,CAAC,+CAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVP,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,SAAS,CAACK,MAAM,CAACC,OAAR,CAAT;AACD,KANL,EAOI;AACA;AACA;AACCX,IAAAA,KAAD,IAAW;AACTG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAbL;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,MAAIA,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaA,KAAK,CAACY,OAAnB,CAAP;AACD,GAFD,MAEO,IAAI,CAACV,QAAL,EAAe;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,GAFM,MAEA;AACL,WACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIE,MAAJ;AARF;AAUD;AACF;;AAED,eAAeL,SAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction Instagram() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [images, setImages] = useState([]);\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch(\"https://www.instagram.com/tiffbouchard/?__a=1\")\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setImages(result.graphql);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n  }, []);\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      // <ul>\n      //   {items.map((item) => (\n      //     <li key={item.name}>\n      //       {item.name} {item.price}\n      //     </li>\n      //   ))}\n      // </ul>\n      <p>{images}</p>\n    );\n  }\n}\n\nexport default Instagram;\n"]},"metadata":{},"sourceType":"module"}